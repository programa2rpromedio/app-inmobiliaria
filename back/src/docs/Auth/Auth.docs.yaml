paths:
  /api/auth/register:
    post:
      summary: Create a new user, send welcome email and return session token
      tags: 
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/NewUser'
      responses:
        "201":
          description: "Created: User successfully created"
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#components/schemas/LoggedUser'
                    - type: string
                      description: JWT access token for authentication
                      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NWY4YTFkN2NlN2JlMWFlYTcyNGE3ZGYiLCJpYXQiOjE3MTEyMDk1MDcsImV4cCI6MTcxMTIxMzEwN30.9srn1umXFmQfDALWDZ9bucbIe6_E
        "400":
          description: "Bad Request: Email address already in use"
        "500":
          description: "Internal server error"
  /api/auth/login:
    post:
      summary: Login existing user and return session token.
      tags: 
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/LoginUser'
      responses:
        "200":
          description: "Success: User successfully logged in"
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#components/schemas/LoggedUser'
                    - type: string
                      description: JWT access token for authentication
                      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NWY4YTFkN2NlN2JlMWFlYTcyNGE3ZGYiLCJpYXQiOjE3MTEyMDk1MDcsImV4cCI6MTcxMTIxMzEwN30.9srn1umXFmQfDALWDZ9bucbIe6_E
        "400":
          description: "Bad request: Missing credentials"
        "401":
          description: "Unauthorized: Bad credentials"
        "404":
          description: "Not found: User not found"  
        "500":
          description: "Internal server error"
    
components:
  schemas:
    LoggedUser:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Autogenerated mongo Id. Unique field
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        email:
          type: string
          description: User email. Unique field
        profilePicture:
          type: object
          properties:
            url:
              type: string
              description: URL of the user's profile picture
            public_id:
              type: string
              description: Public ID of the user's profile picture
          description: Object representing the user's profile picture
        role:
          type: string
          description: Role of the user. Allowed values are admin, tenant, owner.
        city:
          type: string
          description: City of the user's location
        address:
          type: string
          description: Address of the user's location
        phone:
          type: string
          description: Phone number of the user
        favourites:
          type: array
          items:
            type: string
            format: ObjectId
            description: References to the properties that the user has favorited
          description: Array of references to the properties favorited by the user
      example:
        _id: ObjectId(abcdefg12345)
        firstName: Programador
        lastName: Promedio
        email: programador@email.com
        password: abcd1234
        profilePicture:
          url: pictureurl.cloudinary.com
          public_id: '00000001'
        role: tenant
        city: Buenos Aires
        address: Avenida 123
        phone: '+549 1234567890'
        favourites:
          - ObjectId(123)
          - ObjectId(321)
  requestBodies:
    NewUser:
      type: object
      properties:
        firstName: 
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password
        role:
          type: string
          description: User role
        address:
          type: string
          description: Address of the user's location
        city:
          type: string
          description: City of the user's location
        phone:
          type: string
          unique: true
          description: Phone number of the user
        image:
          type: string
          format: binary
          description: Image file for user's profile picture
    LoginUser:
      type: object
      properties:
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password
